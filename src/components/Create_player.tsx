import React, { useState, useEffect } from "react";
import "./components_styles/create_team.css";
import { Button } from "@mui/material";
import axios from "axios";

type Player = {
  id: number;
  name: string;
  birth: string;
  sport: string;
  team: string;
};

const CreatePlayer = () => {
  const [playersState, setPlayersState] = useState<Player[]>([]); // State for players list
  const [playerCard, setPlayerCard] = useState<Player>({
    id: 0, // Don't worry about this initially; it will not be sent for new players
    name: "",
    birth: "",
    sport: "",
    team: "",
  });
  const [isEditing, setIsEditing] = useState(false); // Track if editing mode is active

  const apiUrl = "http://localhost:5000/players"; // JSON Server API endpoint

  // Fetch players from the JSON Server on component mount
  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        const response = await axios.get(apiUrl);
        setPlayersState(response.data);
      } catch (error) {
        console.error("Error fetching players:", error);
        alert("Failed to fetch players. Please check your server connection.");
      }
    };

    fetchPlayers();
  }, []);

  // Handle input changes in the form
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setPlayerCard({ ...playerCard, [name]: value });
  };

  // Handle form submission for creating or editing
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (playerCard.name && playerCard.team && playerCard.birth && playerCard.sport) {
      try {
        if (isEditing) {
          // Edit existing player
          await axios.put(`${apiUrl}/${playerCard.id}`, playerCard);
          setPlayersState((prev) =>
            prev.map((player) => (player.id === playerCard.id ? playerCard : player))
          );
          alert("Player updated successfully!");
        } else {
          // Create new player (do not send `id` as it will be generated by the server)
          const response = await axios.post(apiUrl, {
            name: playerCard.name,
            birth: playerCard.birth,
            sport: playerCard.sport,
            team: playerCard.team,
          });
          setPlayersState([...playersState, response.data]); // Use the generated player data (including `id`)
          alert("Player created successfully!");
        }

        // Reset the form fields
        setPlayerCard({
          id: 0, // Reset id after creation or editing
          name: "",
          birth: "",
          sport: "",
          team: "",
        });
        setIsEditing(false); // Exit editing mode
      } catch (error) {
        console.error("Error saving player:", error);
        alert("Failed to save player. Please try again.");
      }
    } else {
      alert("Please fill in all fields.");
    }
  };

  // Handle edit button click
  const handleEdit = (player: Player) => {
    setPlayerCard(player); // Load player data into the form
    setIsEditing(true); // Enable editing mode
  };

  return (
    <>
      <div className="register-container" style={{ marginLeft: "340px" }}>
        <form onSubmit={handleSubmit}>
          <h2 style={{ color: "white" }}>{isEditing ? "Edit Player" : "Create Player"}</h2>

          <div className="form-grid">
            <div className="form-column">
              <label htmlFor="player_name">Player Name</label>
              <input
                type="text"
                id="player_name"
                name="name"
                value={playerCard.name}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="form-column">
              <label htmlFor="team">Team</label>
              <input
                type="text"
                id="team"
                name="team"
                value={playerCard.team}
                onChange={handleInputChange}
                required
              />
            </div>
          </div>

          <div className="form-grid">
            <div className="form-column">
              <label htmlFor="birth_date">Birth Date</label>
              <input
                type="date"
                id="birth_date"
                name="birth"
                value={playerCard.birth}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="form-column">
              <label htmlFor="sport_field">Sport Field</label>
              <input
                type="text"
                id="sport_field"
                name="sport"
                value={playerCard.sport}
                onChange={handleInputChange}
                required
              />
            </div>
          </div>

          <Button variant="contained" color="primary" type="submit">
            {isEditing ? "Update Player" : "Create Player"}
          </Button>
        </form>
      </div>

   
    </>
  );
};

export default CreatePlayer;
